/*
 * keyboard.c
 *
 *  Created on: 2013-02-11
 *      Author: Janadamis
 *
 *  Biblioteka do obsługi klawiatury pod PS2 dla mikroprocesora AVR Atmega32.
 *  Biblioteka może odczytywać nadlatujące dane z klawiatury
 *  bez możliwości wysyłania danych do klawiatury.
 *  Do użytku w swoim programie udostępniono nastepujace parametry:
 *
 *  -Funkcje keyboardwait(); która zastopuje program do czasu naciśniecia
 *   przycisku znakowego.
 *  -Funkcja keyswitchwait(); która zastopuje program do czasu naciśnięcia
 *   przycisku funkcyjnego.
 *  -zmienna key_board przybierająca kod ASCII wciśnietego klawisza znakowego.
 *  -zmienna key_switch przybierająca numer(1-60) wciśniętego klawisza
 *   funkcyjnego podanego w pliku keyboard.h
 *  Źródło http://leon-instruments.blogspot.com/
 *  Wszelkie prawa zastrzeżone
 */


#include <avr/io.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>
#include "keyboard.h"

// przerwanie jest wywoływane każdym zboczem opadającym
// na sygnale zegarowym generowanym przez klawiaturę.
// procedura obsługi przerwania zewnętrznego
#if PS2_CLK_BIT  == 2
  #define USE_INT0
  ISR(INT0_vect)
#elif PS2_CLK_BIT == 3
  #define USE_INT1
  ISR(INT1_vect)
#endif
{
	static uint8_t nrbitu;
    static uint8_t shift;
    static uint8_t poprzedni;
    static uint8_t ignoruj;
    static uint8_t dane;

    // Odczytywanie 8-bitowego scan-code
    if(nrbitu == 0) {            			// bit startu ignorujemy
        nrbitu++;
        return;
    } else if(nrbitu >= 1 && nrbitu <=8) { // bity od 1 do 8 to dane
        dane = dane >> 1;  //zaczynamy od bitu najmłodszego do najstarszego
        if(PS2_DATA_PIN & (1<<PS2_DATA_BIT)) dane |= _BV(7);
        nrbitu++;
        return;
    } else if(nrbitu == 9) {    			// bit parzystości ignorujemy
        nrbitu++;
        return;
    } else if(nrbitu >= 10 ) {    					// bit stopu
        nrbitu = 0;

        // rozpoczęcie zmiany scancode przycisków na liczby
        if(poprzedni != 0xF0 && (dane == 0x12 || dane == 0x59)) {   // shift
        shift = 1;
        poprzedni = dane;
        return;
        }

        if(ignoruj) {		//Ignorowanie kolejno nadlatujacych danych
            --ignoruj;
            dane = 0;
            poprzedni = 0;
            return;
        }

        if(poprzedni == 0xF0) {     // Ignorowanie zwolnionego klawisza
            if(dane == 0x12 || dane == 0x59) {       // shift
                shift = 0;

            }
            poprzedni = 0;
            return;
        }

        if(dane == 0xF0) {             // sygnal zwolnienia klawisza
            poprzedni = dane;

    #if 	Zeruj_key_board   == 1
            key_board=0;
    #endif
	#if 	Zeruj_key_switch  == 1
            key_switch=0;
	#endif

            return;
        }

   if( (poprzedni == 0xF0) && (dane == 0x77) ) {
      // Samoistne zerowanie klawisza pause po odebraniu 2 ostatnich danych
        	key_switch=0;
        	poprzedni = 0;
            dane = 0;
            return;
        }
     if(dane == 0xE1) {
     // klawisz PAUSE przy użyciu tzeba wyzerować samemu w programie
	 // albo odblokowac poprzenią funkcję
     // klawiatura wysyła E1,14,77,E1,F0,14,F0,77
     // rozpoznawany jest tylko pierwszy kod, 5 kolejnych jest ignorowane
     // po czym 2 ostatnie są rozpoznawane jako zwolnienie przycisku.
            key_switch = 13;
            ignoruj = 5;
            poprzedni = 0;
            dane = 0;
            return;
        }

        if(dane == 0xE0) {        // sygnal poprzedzajacy klawisze funkcyjne
                   poprzedni = dane;
                   return;
           }

        if(poprzedni == 0xE0 ) {
                   switch(dane) {
                       case 0x75: {key_switch = 14; break;}	//Up    strzałki
                       case 0x6b: {key_switch = 15; break;}	//Left	strzałki
                       case 0x72: {key_switch = 16; break;}	//down	strzałki
                       case 0x74: {key_switch = 17; break;}	//right	strzałki
                       case 0x5a: {key_switch = 18; break;}	//enter numeryczna
                       case 0x4a: {key_board = '/'; return;}	  //numeryczna
                       case 0x1f: {key_switch = 19; break;}	//L gui
                       case 0x27: {key_switch = 20; break;}	//P gui
                       case 0x14: {key_switch = 21; break;}	//P ctrl
                       case 0x2f: {key_switch = 22; break;}	//APPS
                       case 0x7c: {key_switch = 23; break;}	//print screan
                       case 0x70: {key_switch = 24; break;}	//insert
                       case 0x6c: {key_switch = 25; break;}	//home
                       case 0x7d: {key_switch = 26; break;}	//page up
                       case 0x11: {key_switch = 27; break;}	//P alt
                       case 0x71: {key_switch = 28; break;}	//delate
                       case 0x7a: {key_switch = 29; break;}	//page down
                       case 0x69: {key_switch = 30; break;}	//end
                       //Klawisze dodatkowe funkcyjne
                       case 0x32: {key_switch = 31; break;}	//Volume up
                       case 0x21: {key_switch = 32; break;}	//Volume down
                       case 0x34: {key_switch = 33; break;}	//play/pause
                       case 0x3a: {key_switch = 34; break;}	//www home
                       case 0x48: {key_switch = 35; break;}	//email
                       case 0x3b: {key_switch = 36; break;}	//stop
                       case 0x23: {key_switch = 37; break;}	//mute
                       case 0x2b: {key_switch = 38; break;}	//calkulator
                       case 0x40: {key_switch = 39; break;}	//my computer
                       case 0x4d: {key_switch = 40; break;}	//new track
                       case 0x15: {key_switch = 41; break;}	//Previous Track
                       case 0x50: {key_switch = 42; break;}	//media select
                       case 0x10: {key_switch = 43; break;}	//WWW Search
                       case 0x38: {key_switch = 44; break;}	//WWW Back
                       case 0x30: {key_switch = 45; break;}	//WWW Forward
                       case 0x28: {key_switch = 46; break;}	//WWW Stop
                       case 0x20: {key_switch = 47; break;}	//WWW Refresh
                       case 0x18: {key_switch = 48; break;}	//WWW Favorites
                       case 0x37: {key_switch = 49; break;}	//Power
                       case 0x3f: {key_switch = 50; break;}	//Sleep
                       case 0x5e: {key_switch = 51; break;}	//Wake
                       default:   key_board = 0; key_switch = 0; return;
                   }
                   poprzedni = 0;
                   dane = 0;
                   return;
               }
        if(poprzedni != (0xE0||0xF0) )
        {
        switch(dane)	 // przetwarzanie scankodow klawiatury na ASCII
			{
			//klawisze funkcyjne
			case 0x7e: {key_switch = 52; return;}        // scroll lock
			case 0x77: {key_switch = 53; return;}        // numlock
			case 0x14: {key_switch = 54; return;}        //L ctrl
			case 0x11: {key_switch = 55; return;}        //L alt
			case 0x58: {key_switch = 56; return;}        // caps lock
			case 0x0d: {key_switch = 57; return;}        // tab
			case 0x5a: {key_switch = 58; return;}        // enter
            case 0x76: {key_switch = 59; return;}        // escape
            case 0x66: {key_switch = 60; return;}        // backspace
            //Koniec klawiszy funkcyjnych
            case 0x1c:
                if(shift) {key_board = 'A'; return;}
                else {key_board = 'a'; return;}
            case 0x32:
                if(shift) {key_board = 'B'; return;}
                else {key_board = 'b'; return;}
            case 0x21:
                if(shift) {key_board = 'C'; return;}
                else {key_board = 'c'; return;}
            case 0x23:
                if(shift) {key_board = 'D'; return;}
                else {key_board = 'd'; return;}
            case 0x24:
                if(shift) {key_board = 'E'; return;}
                else {key_board = 'e'; return;}
            case 0x2b:
                if(shift) {key_board = 'F'; return;}
                else {key_board = 'f'; return;}
            case 0x34:
                if(shift) {key_board = 'G'; return;}
                else {key_board = 'g'; return;}
            case 0x33:
                if(shift) {key_board = 'H'; return;}
                else {key_board = 'h'; return;}
            case 0x43:
                if(shift) {key_board = 'I'; return;}
                else {key_board = 'i'; return;}
            case 0x3b:
                if(shift) {key_board = 'J'; return;}
                else {key_board = 'j'; return;}
            case 0x42:
                if(shift) {key_board = 'K'; return;}
                else {key_board = 'k'; return;}
            case 0x4b:
                if(shift) {key_board = 'L'; return;}
                else {key_board = 'l'; return;}
            case 0x3a:
                if(shift) {key_board = 'M'; return;}
                else {key_board = 'm'; return;}
            case 0x31:
                if(shift) {key_board = 'N'; return;}
                else {key_board = 'n'; return;}
            case 0x44:
                if(shift) {key_board = 'O'; return;}
                else {key_board = 'o'; return;}
            case 0x4d:
                if(shift) {key_board = 'P'; return;}
                else {key_board = 'p'; return;}
            case 0x15:
                if(shift) {key_board = 'Q'; return;}
                else {key_board = 'q'; return;}
            case 0x2d:
                if(shift) {key_board = 'R'; return;}
                else {key_board = 'r'; return;}
            case 0x1b:
                if(shift) {key_board = 'S'; return;}
                else {key_board = 's'; return;}
            case 0x2c:
                if(shift) {key_board = 'T'; return;}
                else {key_board = 't'; return;}
            case 0x3c:
                if(shift) {key_board = 'U'; return;}
                else {key_board = 'u'; return;}
            case 0x2a:
                if(shift) {key_board = 'V'; return;}
                else {key_board = 'v'; return;}
            case 0x1d:
                if(shift) {key_board = 'W'; return;}
                else {key_board = 'w'; return;}
            case 0x22:
                if(shift) {key_board = 'X'; return;}
                else {key_board = 'x'; return;}
            case 0x35:
                if(shift) {key_board = 'Y'; return;}
                else {key_board = 'y'; return;}
            case 0x1a:
                if(shift) {key_board = 'Z'; return;}
                else {key_board = 'z'; return;}


            case 0x16:
                if(shift) {key_board = '!'; return;}
                else {key_board = '1'; return;}
            case 0x1e:
                if(shift) {key_board = '@'; return;}
                else {key_board = '2'; return;}
            case 0x26:
                if(shift) {key_board = '#'; return;}
                else {key_board = '3'; return;}
            case 0x25:
                if(shift) {key_board = '$'; return;}
                else {key_board = '4'; return;}
            case 0x2e:
                if(shift) {key_board = '%'; return;}
                else {key_board = '5'; return;}
            case 0x36:
                if(shift) {key_board = '^'; return;}
                else {key_board = '6'; return;}
            case 0x3d:
                if(shift) {key_board = '&'; return;}
                else {key_board = '7'; return;}
            case 0x3e:
                if(shift) {key_board = '*'; return;}
                else {key_board = '8'; return;}
            case 0x46:
                if(shift) {key_board = '('; return;}
                else {key_board = '9'; return;}
            case 0x45:
                if(shift) {key_board = ')'; return;}
                else {key_board = '0'; return;}
            case 0x4e:
                if(shift) {key_board = '_'; return;}
                else {key_board = '-'; return;}
            case 0x55:
                if(shift) {key_board = '+'; return;}
                else {key_board = '='; return;}
            case 0x5d:
                if(shift) {key_board = '|'; return;}
                else {key_board = 92; return;}
            case 0x54:
                if(shift) {key_board = '{'; return;}
                else {key_board = '['; return;}
            case 0x5b:
                if(shift) {key_board = '}'; return;}
                else {key_board = ']'; return;}
            case 0x4c:
                if(shift) {key_board = ':'; return;}
                else {key_board = ';'; return;}
            case 0x52:
                if(shift) {key_board = '"'; return;}
                else {key_board = 39; return;}
            case 0x41:
                if(shift) {key_board = '<'; return;}
                else {key_board = ','; return;}
            case 0x49:
                if(shift) {key_board = '>'; return;}
                else {key_board = '.'; return;}
            case 0x4a:
                if(shift) {key_board = '?'; return;}
                else {key_board = '/'; return;}
            case 0x0e:
                if(shift) {key_board = '~'; return;}
                else {key_board = '`'; return;}

            case 0x29: key_board = ' '; return;
            case 0x70: key_board = 0; return;        // keypad
            case 0x69: key_board = 1; return;        // keypad
            case 0x72: key_board = 2; return;        // keypad
            case 0x7a: key_board = 3; return;        // keypad
            case 0x6b: key_board = 4; return;        // keypad
            case 0x73: key_board = 5; return;        // keypad
            case 0x74: key_board = 6; return;        // keypad
            case 0x6c: key_board = 7; return;        // keypad
            case 0x75: key_board = 8; return;        // keypad
            case 0x7d: key_board = 9; return;        // keypad
            case 0x71: key_board = '.'; return;      // keypad
            case 0x79: key_board = '+'; return;      // keypad
            case 0x7b: key_board = '-'; return;      // keypad
            case 0x7c: key_board = '*'; return;      // keypad

            case 0x05: key_switch = 1; return;       // F1
            case 0x06: key_switch = 2; return;       // F2
            case 0x04: key_switch = 3; return;       // F3
            case 0x0c: key_switch = 4; return;       // F4
            case 0x03: key_switch = 5; return;       // F5
            case 0x0b: key_switch = 6; return;       // F6
            case 0x83: key_switch = 7; return;       // F7
            case 0x0a: key_switch = 8; return;       // F8
            case 0x01: key_switch = 9; return;       // F9
            case 0x09: key_switch = 10; return;      // F10
            case 0x78: key_switch = 11; return;      // F11
            case 0x07:  key_switch = 12; return;     // F12

            default:   key_board = 0; key_switch = 0; return;
			}
        }
		}
}

void initkeyboard(void) {		// Inicjalizacja kalwiatury/ps2

  	PS2_DATA_DDR &= ~(1<<PS2_DATA_BIT);  // kierunek pinu DATA jako wejście
    PS2_CLK_DDR &= ~(1<<PS2_CLK_BIT);    // kierunek pinu CLK jako wejście

      #ifdef USE_INT0
    GICR |= (1 << INT0);  // zezwolenie na przerwanie INT0
    MCUCR |= (1 << ISC01); // przerwanie INT0 wyzwalane zboczem opadającym
  #endif

  #ifdef USE_INT1
    GICR |= (1 << INT1);  // zezwolenie na przerwanie INT1
    MCUCR |= (1 << ISC11); // przerwanie INT1 wyzwalane zboczem opadającym
  #endif

  }


 uint8_t keyboardwait(void) {
     // funkcja czeka, aż użytkownik wciśnie jakiś klawisz znakowy,
	 //czyli jak zmienna key_board przybierze inną wartość niż 0

      uint8_t bufor;
      while(!(bufor=key_board));
      key_board = 0;
      return bufor;
  }

 uint8_t keyswitchwait(void) {
     // funkcja czeka, aż użytkownik wciśnie jakiś klawisz funkcyjny,
	 //czyli jak zmienna key_switch przybierze inną wartość niż 0

      uint8_t bufor;
      while(!(bufor=key_switch));
      key_switch = 0;
      return bufor;
  }